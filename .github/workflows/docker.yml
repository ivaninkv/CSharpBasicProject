name: Create and publish a Docker image

on:
  push:
    branches:
      - master

env:
  REGISTRY: ghcr.io
  APP_NAME: fms-bot
  SRC_APP_FOLDER: FlightsMetaSubscriber.App
  TARGET_FOLDER: /apps
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    environment: PROD
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ${{ env.SRC_APP_FOLDER }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Copy files to remote server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: ${{ env.SRC_APP_FOLDER }}/compose.yml, ${{ env.SRC_APP_FOLDER }}/psql-init
          target: ${{ env.TARGET_FOLDER }}
          rm: true

      - name: Generate .env file and deploy docker stack
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo FULL_IMAGE_NAME=${{ steps.meta.outputs.tags }} > ${{ env.TARGET_FOLDER }}/${{ env.SRC_APP_FOLDER }}/.env
            echo BOT_TOKEN=${{ secrets.BOT_TOKEN }} >> ${{ env.TARGET_FOLDER }}/${{ env.SRC_APP_FOLDER }}/.env
            echo DB_HOST=${{ secrets.DB_HOST }} >> ${{ env.TARGET_FOLDER }}/${{ env.SRC_APP_FOLDER }}/.env
            echo DB_NAME=${{ secrets.DB_NAME }} >> ${{ env.TARGET_FOLDER }}/${{ env.SRC_APP_FOLDER }}/.env
            echo DB_PASS=${{ secrets.DB_PASS }} >> ${{ env.TARGET_FOLDER }}/${{ env.SRC_APP_FOLDER }}/.env
            echo AVIASALES_TOKEN=${{ secrets.AVIASALES_TOKEN }} >> ${{ env.TARGET_FOLDER }}/${{ env.SRC_APP_FOLDER }}/.env
            echo ADMIN_IDS="${{ secrets.ADMIN_IDS }}" >> ${{ env.TARGET_FOLDER }}/${{ env.SRC_APP_FOLDER }}/.env
            echo LOG_DIR=${{ secrets.LOG_DIR }} >> ${{ env.TARGET_FOLDER }}/${{ env.SRC_APP_FOLDER }}/.env
            echo Serilog__MinimumLevel=${{ secrets.SERILOG__MINIMUMLEVEL }} >> ${{ env.TARGET_FOLDER }}/${{ env.SRC_APP_FOLDER }}/.env
            env $(cat ${{ env.TARGET_FOLDER }}/${{ env.SRC_APP_FOLDER }}/.env | grep ^[A-Z] | xargs) \
                docker stack deploy -c ${{ env.TARGET_FOLDER }}/${{ env.SRC_APP_FOLDER }}/compose.yml ${{ env.APP_NAME }}
